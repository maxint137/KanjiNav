// http://www.typescriptlang.org/docs/handbook/tsconfig-json.html
// https://www.typescriptlang.org/docs/handbook/compiler-options.html
{
    "compileOnSave": true,
    "compilerOptions": {
        // Run the compiler in watch mode. Watch input files and trigger recompilation on changes.
        "watch": true,

        // Specify ECMAScript target version: "ES3" (default), "ES5", "ES6"/"ES2015", "ES2016", "ES2017" "ESNext". 
        "target": "es5",

        //Specify module code generation: "None", "CommonJS", "AMD", "System", "UMD", "ES6", or "ES2015".
        // ► Only "AMD" and "System" can be used in conjunction with --outFile.
        // ► "ES6" and "ES2015" values may not be used when targeting "ES5" or lower.
        // For Node.js, use --module commonjs; for require.js, use --module amd
        // see https://www.typescriptlang.org/docs/handbook/modules.html
        "module": "amd",

        "outDir": "./js",
        //"outFile": "kanjiNav.js",

        "noImplicitAny": true,
        "noImplicitThis": true,
        //"strictNullChecks": true,

        "sourceMap": true,

        "traceResolution": true

        // Using a baseUrl is a common practice in applications using AMD module loaders where modules are “deployed” to a single folder at run-time. The sources of these modules can live in different directories, but a build script will put them all together.

        //  Path mapping
        // Sometimes modules are not directly located under baseUrl. For instance, an import to a module "jquery" would be translated at runtime to "node_modules\jquery\dist\jquery.slim.min.js". Loaders use a mapping configuration to map module names to files at run-time, see RequireJs documentation and SystemJS documentation.

        // The TypeScript compiler supports the declaration of such mappings using "paths" property in tsconfig.json files. Here is an example for how to specify the "paths" property for jquery.
    }
}